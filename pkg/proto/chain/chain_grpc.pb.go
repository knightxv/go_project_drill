// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: chain/chain.proto

package pbChain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChainServiceClient is the client API for ChainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChainServiceClient interface {
	WithdrawTransfer(ctx context.Context, in *WithdrawTransferReq, opts ...grpc.CallOption) (*WithdrawTransferResp, error)
}

type chainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChainServiceClient(cc grpc.ClientConnInterface) ChainServiceClient {
	return &chainServiceClient{cc}
}

func (c *chainServiceClient) WithdrawTransfer(ctx context.Context, in *WithdrawTransferReq, opts ...grpc.CallOption) (*WithdrawTransferResp, error) {
	out := new(WithdrawTransferResp)
	err := c.cc.Invoke(ctx, "/chain.chainService/WithdrawTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainServiceServer is the server API for ChainService service.
// All implementations should embed UnimplementedChainServiceServer
// for forward compatibility
type ChainServiceServer interface {
	WithdrawTransfer(context.Context, *WithdrawTransferReq) (*WithdrawTransferResp, error)
}

// UnimplementedChainServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChainServiceServer struct {
}

func (UnimplementedChainServiceServer) WithdrawTransfer(context.Context, *WithdrawTransferReq) (*WithdrawTransferResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawTransfer not implemented")
}

// UnsafeChainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainServiceServer will
// result in compilation errors.
type UnsafeChainServiceServer interface {
	mustEmbedUnimplementedChainServiceServer()
}

func RegisterChainServiceServer(s grpc.ServiceRegistrar, srv ChainServiceServer) {
	s.RegisterService(&ChainService_ServiceDesc, srv)
}

func _ChainService_WithdrawTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawTransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainServiceServer).WithdrawTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.chainService/WithdrawTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainServiceServer).WithdrawTransfer(ctx, req.(*WithdrawTransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ChainService_ServiceDesc is the grpc.ServiceDesc for ChainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain.chainService",
	HandlerType: (*ChainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WithdrawTransfer",
			Handler:    _ChainService_WithdrawTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chain/chain.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: score/score.proto

package pbScore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScoreServiceClient is the client API for ScoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoreServiceClient interface {
	UploadUserRewardEvent(ctx context.Context, in *UploadUserRewardEventReq, opts ...grpc.CallOption) (*UploadUserRewardEventResp, error)
	GetUserScoreInfo(ctx context.Context, in *GetUserScoreInfoReq, opts ...grpc.CallOption) (*GetUserScoreInfoResp, error)
	GetRewardEventLogs(ctx context.Context, in *GetRewardEventLogsReq, opts ...grpc.CallOption) (*GetRewardEventLogsResp, error)
	WithdrawScore(ctx context.Context, in *WithdrawScoreReq, opts ...grpc.CallOption) (*WithdrawScoreResp, error)
	GetWithdrawScoreLogs(ctx context.Context, in *GetWithdrawScoreLogsReq, opts ...grpc.CallOption) (*GetWithdrawScoreLogsResp, error)
}

type scoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScoreServiceClient(cc grpc.ClientConnInterface) ScoreServiceClient {
	return &scoreServiceClient{cc}
}

func (c *scoreServiceClient) UploadUserRewardEvent(ctx context.Context, in *UploadUserRewardEventReq, opts ...grpc.CallOption) (*UploadUserRewardEventResp, error) {
	out := new(UploadUserRewardEventResp)
	err := c.cc.Invoke(ctx, "/score.scoreService/UploadUserRewardEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreServiceClient) GetUserScoreInfo(ctx context.Context, in *GetUserScoreInfoReq, opts ...grpc.CallOption) (*GetUserScoreInfoResp, error) {
	out := new(GetUserScoreInfoResp)
	err := c.cc.Invoke(ctx, "/score.scoreService/GetUserScoreInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreServiceClient) GetRewardEventLogs(ctx context.Context, in *GetRewardEventLogsReq, opts ...grpc.CallOption) (*GetRewardEventLogsResp, error) {
	out := new(GetRewardEventLogsResp)
	err := c.cc.Invoke(ctx, "/score.scoreService/GetRewardEventLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreServiceClient) WithdrawScore(ctx context.Context, in *WithdrawScoreReq, opts ...grpc.CallOption) (*WithdrawScoreResp, error) {
	out := new(WithdrawScoreResp)
	err := c.cc.Invoke(ctx, "/score.scoreService/WithdrawScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreServiceClient) GetWithdrawScoreLogs(ctx context.Context, in *GetWithdrawScoreLogsReq, opts ...grpc.CallOption) (*GetWithdrawScoreLogsResp, error) {
	out := new(GetWithdrawScoreLogsResp)
	err := c.cc.Invoke(ctx, "/score.scoreService/GetWithdrawScoreLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoreServiceServer is the server API for ScoreService service.
// All implementations should embed UnimplementedScoreServiceServer
// for forward compatibility
type ScoreServiceServer interface {
	UploadUserRewardEvent(context.Context, *UploadUserRewardEventReq) (*UploadUserRewardEventResp, error)
	GetUserScoreInfo(context.Context, *GetUserScoreInfoReq) (*GetUserScoreInfoResp, error)
	GetRewardEventLogs(context.Context, *GetRewardEventLogsReq) (*GetRewardEventLogsResp, error)
	WithdrawScore(context.Context, *WithdrawScoreReq) (*WithdrawScoreResp, error)
	GetWithdrawScoreLogs(context.Context, *GetWithdrawScoreLogsReq) (*GetWithdrawScoreLogsResp, error)
}

// UnimplementedScoreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedScoreServiceServer struct {
}

func (UnimplementedScoreServiceServer) UploadUserRewardEvent(context.Context, *UploadUserRewardEventReq) (*UploadUserRewardEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadUserRewardEvent not implemented")
}
func (UnimplementedScoreServiceServer) GetUserScoreInfo(context.Context, *GetUserScoreInfoReq) (*GetUserScoreInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserScoreInfo not implemented")
}
func (UnimplementedScoreServiceServer) GetRewardEventLogs(context.Context, *GetRewardEventLogsReq) (*GetRewardEventLogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardEventLogs not implemented")
}
func (UnimplementedScoreServiceServer) WithdrawScore(context.Context, *WithdrawScoreReq) (*WithdrawScoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawScore not implemented")
}
func (UnimplementedScoreServiceServer) GetWithdrawScoreLogs(context.Context, *GetWithdrawScoreLogsReq) (*GetWithdrawScoreLogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawScoreLogs not implemented")
}

// UnsafeScoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoreServiceServer will
// result in compilation errors.
type UnsafeScoreServiceServer interface {
	mustEmbedUnimplementedScoreServiceServer()
}

func RegisterScoreServiceServer(s grpc.ServiceRegistrar, srv ScoreServiceServer) {
	s.RegisterService(&ScoreService_ServiceDesc, srv)
}

func _ScoreService_UploadUserRewardEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadUserRewardEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).UploadUserRewardEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/score.scoreService/UploadUserRewardEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).UploadUserRewardEvent(ctx, req.(*UploadUserRewardEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreService_GetUserScoreInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserScoreInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).GetUserScoreInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/score.scoreService/GetUserScoreInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).GetUserScoreInfo(ctx, req.(*GetUserScoreInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreService_GetRewardEventLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardEventLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).GetRewardEventLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/score.scoreService/GetRewardEventLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).GetRewardEventLogs(ctx, req.(*GetRewardEventLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreService_WithdrawScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).WithdrawScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/score.scoreService/WithdrawScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).WithdrawScore(ctx, req.(*WithdrawScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreService_GetWithdrawScoreLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawScoreLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).GetWithdrawScoreLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/score.scoreService/GetWithdrawScoreLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).GetWithdrawScoreLogs(ctx, req.(*GetWithdrawScoreLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ScoreService_ServiceDesc is the grpc.ServiceDesc for ScoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "score.scoreService",
	HandlerType: (*ScoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadUserRewardEvent",
			Handler:    _ScoreService_UploadUserRewardEvent_Handler,
		},
		{
			MethodName: "GetUserScoreInfo",
			Handler:    _ScoreService_GetUserScoreInfo_Handler,
		},
		{
			MethodName: "GetRewardEventLogs",
			Handler:    _ScoreService_GetRewardEventLogs_Handler,
		},
		{
			MethodName: "WithdrawScore",
			Handler:    _ScoreService_WithdrawScore_Handler,
		},
		{
			MethodName: "GetWithdrawScoreLogs",
			Handler:    _ScoreService_GetWithdrawScoreLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "score/score.proto",
}
